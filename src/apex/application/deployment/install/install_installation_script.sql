prompt --application/deployment/install/install_installation_script
begin
--   Manifest
--     INSTALL: INSTALL-Installation_Script
--   Manifest End
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>984337
,p_default_id_offset=>0
,p_default_owner=>'MT_NDBRUIJN'
);
wwv_flow_api.create_install_script(
 p_id=>wwv_flow_api.id(13128252693641199235)
,p_install_id=>wwv_flow_api.id(13149005738210099868)
,p_name=>'Installation_Script'
,p_sequence=>10
,p_script_type=>'INSTALL'
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'CREATE TABLE "FLOW_DIAGRAMS" ',
'   (	"DGRM_NAME" VARCHAR2(150), ',
'	"DGRM_CONTENT" CLOB, ',
'	 CONSTRAINT "DGRM_UK" UNIQUE ("DGRM_NAME")',
'  USING INDEX  ENABLE',
'   ) ;',
'/',
'',
'CREATE TABLE "FLOW_OBJECTS" ',
'   (	"OBJT_ID" VARCHAR2(50 CHAR), ',
'	"OBJT_NAME" VARCHAR2(200 CHAR), ',
'	"OBJT_DGRM_NAME" VARCHAR2(150 CHAR), ',
'	"OBJT_TYPE" VARCHAR2(50 CHAR), ',
'	"OBJT_TAG_NAME" VARCHAR2(50 CHAR), ',
'	"OBJT_INCOMING" VARCHAR2(50 CHAR), ',
'	"OBJT_OUTGOING" VARCHAR2(50 CHAR), ',
'	"OBJT_ORIGIN" VARCHAR2(50), ',
'	 CONSTRAINT "OBJT_PK" PRIMARY KEY ("OBJT_DGRM_NAME", "OBJT_ID")',
'  USING INDEX  ENABLE',
'   ) ;',
'/',
'',
'CREATE TABLE "FLOW_CONNECTIONS" ',
'   (	"CONN_ID" VARCHAR2(50 CHAR), ',
'	"CONN_NAME" VARCHAR2(100 CHAR), ',
'	"CONN_SOURCE_REF" VARCHAR2(50 CHAR), ',
'	"CONN_TARGET_REF" VARCHAR2(50 CHAR), ',
'	"CONN_DGRM_NAME" VARCHAR2(150 CHAR), ',
'	"CONN_TYPE" VARCHAR2(50 CHAR), ',
'	"CONN_TAG_NAME" VARCHAR2(50 CHAR), ',
'	"CONN_ORIGIN" VARCHAR2(50 CHAR), ',
'	 CONSTRAINT "CONN_PK" PRIMARY KEY ("CONN_ID")',
'  USING INDEX  ENABLE',
'   ) ;',
'/',
'',
'CREATE TABLE "FLOW_PROCESSES" ',
'   (	"PRCS_ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP , ',
'	"PRCS_NAME" VARCHAR2(150), ',
'	"PRCS_DGRM_NAME" VARCHAR2(150), ',
'	"PRCS_CURRENT" VARCHAR2(50), ',
'	"PRCS_INIT_DATE" DATE, ',
'	"PRCS_LAST_UPDATE" DATE, ',
'	 CONSTRAINT "PRCS_PK" PRIMARY KEY ("PRCS_ID")',
'  USING INDEX  ENABLE',
'   ) ;',
'/',
'',
'ALTER TABLE "FLOW_OBJECTS" ADD CONSTRAINT "OBJT_DGRM_FK" FOREIGN KEY ("OBJT_DGRM_NAME")',
'	  REFERENCES "FLOW_DIAGRAMS" ("DGRM_NAME") ON DELETE CASCADE ENABLE;',
'/',
'',
'ALTER TABLE "FLOW_CONNECTIONS" ADD CONSTRAINT "CONN_OBJT_FK" FOREIGN KEY ("CONN_DGRM_NAME", "CONN_SOURCE_REF")',
'	  REFERENCES "FLOW_OBJECTS" ("OBJT_DGRM_NAME", "OBJT_ID") DEFERRABLE INITIALLY DEFERRED ENABLE;',
'/',
'',
'ALTER TABLE "FLOW_CONNECTIONS" ADD CONSTRAINT "CONN_OBJT_FK2" FOREIGN KEY ("CONN_DGRM_NAME", "CONN_TARGET_REF")',
'	  REFERENCES "FLOW_OBJECTS" ("OBJT_DGRM_NAME", "OBJT_ID") DEFERRABLE INITIALLY DEFERRED ENABLE;',
'/',
'',
'ALTER TABLE "FLOW_CONNECTIONS" ADD CONSTRAINT "CONN_DGRM_FK" FOREIGN KEY ("CONN_DGRM_NAME")',
'	  REFERENCES "FLOW_DIAGRAMS" ("DGRM_NAME") ON DELETE CASCADE ENABLE;',
'/',
'',
'ALTER TABLE "FLOW_PROCESSES" ADD CONSTRAINT "PRCS_DGRM_FK" FOREIGN KEY ("PRCS_DGRM_NAME")',
'	  REFERENCES "FLOW_DIAGRAMS" ("DGRM_NAME") ON DELETE CASCADE ENABLE;',
'/',
'',
'create view FLOW_P0001_VW',
'as',
'select "DGRM_NAME"',
'     , "DGRM_CONTENT"',
'  from flow_diagrams',
'/',
'',
'create view FLOW_P0003_VW',
'as',
'select "DGRM_NAME"',
'     , "DGRM_CONTENT"',
'  from flow_diagrams',
'/',
'',
'create view FLOW_P0010_VW',
'as',
'  select dgrm.dgrm_content',
'       , prcs.prcs_current',
'       , prcs.prcs_id ',
'    from flow_diagrams  dgrm',
'    join flow_processes prcs on dgrm.dgrm_name = prcs.prcs_dgrm_name',
'/',
'',
'create view FLOW_R_DRGM_VW',
'as',
'  select drgm.dgrm_name r',
'       , drgm.dgrm_name d',
'    from flow_diagrams drgm',
'/',
'',
'create view FLOW_P0010_2_VW',
'as ',
'   select prcs.prcs_id',
'        , prcs.prcs_name',
'        , prcs.prcs_dgrm_name',
'        , case',
'          when prcs.prcs_current is not null',
'          then',
'            objt.objt_name',
'          when prcs.prcs_current is null',
'          then',
'            ''n.a.''',
'          end as prcs_current',
'        , prcs.prcs_init_date',
'        , prcs.prcs_last_update',
'        , null  as start_link',
'        , null  as reset_link',
'        , null  as delete_link',
'     from flow_processes prcs',
'left join flow_objects   objt on ',
'          (   prcs.prcs_current = objt.objt_id',
'          and prcs.prcs_dgrm_name = objt.objt_dgrm_name',
'          )',
'/',
'',
'create view FLOW_P0010_3_VW',
'as',
'select prcs.prcs_id',
'       , conn.conn_name d',
'       , conn.conn_name r',
'    from flow_connections conn',
'    join flow_processes   prcs on (conn.conn_source_ref = prcs.prcs_current)',
'   where conn.conn_dgrm_name = prcs_dgrm_name',
'order by conn.conn_name asc',
'/',
'',
'create or replace package flow_api_pkg',
'as',
'',
'  function flow_create',
'  ( ',
'    p_diagram_name in flow_diagrams.dgrm_name%type',
'  , p_process_name in flow_processes.prcs_name%type default null',
'  ) return number;',
'  ',
'  function next_step_exists',
'  ( ',
'    p_process_id in number',
'  ) return boolean;',
'  ',
'  function next_multistep_exists',
'  ( ',
'    p_process_id in number',
'  ) return boolean;',
'  ',
'  procedure flow_start',
'  (',
'    p_process_id in flow_processes.prcs_id%type',
'  );',
'  ',
'  procedure flow_next_step',
'  (',
'    p_process_id in flow_processes.prcs_id%type',
'  );',
'  ',
'  procedure flow_next_branch',
'  ( ',
'    p_process_id  in flow_processes.prcs_id%type',
'  , p_branch_name in varchar2',
'  );',
'  ',
'  procedure flow_reset',
'  ( ',
'    p_process_id in flow_processes.prcs_id%type',
'  );',
'  ',
'  procedure flow_delete',
'  ( ',
'    p_process_id in flow_processes.prcs_id%type',
'  );',
'  ',
'end flow_api_pkg;',
'/',
'',
'',
'create or replace package body flow_api_pkg',
'as',
'-- get diagram name',
'  function get_dgrm_name',
'  (',
'    p_prcs_id in flow_processes.prcs_id%type',
'  ) return varchar2',
'  is',
'    l_dgrm_name flow_diagrams.dgrm_name%type;',
'  begin',
'    select prcs.prcs_dgrm_name',
'      into l_dgrm_name',
'      from flow_processes prcs',
'     where prcs.prcs_id = p_prcs_id',
'    ;',
'         ',
'    return l_dgrm_name;',
'  exception',
'    when others then',
'      raise;',
'  end get_dgrm_name;',
'',
'  function flow_create',
'  (',
'    p_diagram_name in flow_diagrams.dgrm_name%type',
'  , p_process_name in flow_processes.prcs_name%type default null',
'  ) return number',
'  is',
'    l_ret number;',
'  begin',
'       insert ',
'         into flow_processes prcs',
'            ( prcs.prcs_name',
'            , prcs.prcs_dgrm_name',
'            , prcs.prcs_current',
'            , prcs.prcs_init_date',
'            , prcs.prcs_last_update',
'            )',
'       values',
'            ( p_process_name',
'            , p_diagram_name',
'            , null',
'            , sysdate',
'            , sysdate',
'            )',
'    returning prcs.prcs_id',
'         into l_ret',
'            ;',
'    return l_ret;',
'  exception',
'    when others then',
'      raise;',
'  end flow_create;',
'',
'  function next_step_exists',
'  ( p_process_id in number',
'  ) return boolean',
'  is',
'    l_next_count number;',
'    l_dgrm_name   flow_diagrams.dgrm_name%type;',
'  begin',
'    l_dgrm_name:= get_dgrm_name(p_prcs_id => p_process_id);',
'    if p_process_id is not null',
'    then',
'      select count(*)                        ',
'        into l_next_count',
'        from flow_processes prcs',
'           , flow_objects   objt',
'       where prcs.prcs_id = p_process_id',
'         and  objt.objt_dgrm_name = l_dgrm_name',
'         and  objt.objt_id = prcs.prcs_current',
'         and (  objt.objt_tag_name != ''bpmn:endEvent''',
'             or (   objt.objt_tag_name = ''bpmn:endEvent''',
'                and objt.objt_type != ''PROCESS''',
'                )',
'                or objt.objt_tag_name = ''bpmn:startEvent''',
'             )',
'             ;',
'        if l_next_count > 0',
'        then',
'          return true;',
'        else',
'          return false;',
'        end if;',
'    end if;',
'  exception',
'    when others',
'    then',
'      raise;',
'  end next_step_exists;',
'  function next_multistep_exists',
'  ( p_process_id in number',
'  ) return boolean',
'  is',
'    l_next_count number;',
'    l_dgrm_name   flow_diagrams.dgrm_name%type;',
'  begin',
'    l_dgrm_name:= get_dgrm_name(p_prcs_id => p_process_id);',
'    if p_process_id is not null',
'    then',
'      select count(*)                        ',
'        into l_next_count',
'        from flow_processes   prcs',
'           , flow_connections conn',
'       where prcs.prcs_id = p_process_id',
'         and conn.conn_dgrm_name = l_dgrm_name',
'         and conn.conn_source_ref = prcs.prcs_current',
'           ;',
'        if l_next_count > 1',
'        then',
'          return true;',
'        else',
'          return false;',
'        end if;',
'    end if;',
'  exception',
'    when others',
'    then',
'      raise;',
'  end next_multistep_exists;',
'  procedure flow_start',
'  ( p_process_id in flow_processes.prcs_id%type',
'  )',
'  is',
'    l_dgrm_name     flow_diagrams.dgrm_name%type;',
'    l_objt_id       flow_objects.objt_id%type;',
'  begin',
'    l_dgrm_name:= get_dgrm_name( p_prcs_id => p_process_id);',
'    begin',
'      -- get the object to start with',
'      select objt.objt_id',
'        into l_objt_id',
'        from flow_objects objt',
'       where objt.objt_id not in (select conn.conn_target_ref from flow_connections conn)',
'         and objt.objt_dgrm_name = l_dgrm_name',
'         and objt.objt_tag_name = ''bpmn:startEvent''',
'         and objt.objt_type = ''PROCESS''',
'         and objt.objt_origin = ''Process_0rxermh'' -- if multiple processes were defined, get the main one which always has this static ID',
'           ;',
'    exception',
'    when TOO_MANY_ROWS',
'    then',
'      apex_error.add_error',
'      ( p_message => ''You have multiple starting events defined. Make sure your diagram has only one starting event.''',
'      , p_display_location => apex_error.c_on_error_page',
'      );',
'    when NO_DATA_FOUND',
'    then',
'      apex_error.add_error',
'      ( p_message => ''No starting event was defined.''',
'      , p_display_location => apex_error.c_on_error_page',
'      );',
'    end;',
'    update flow_processes prcs',
'       set prcs.prcs_current = l_objt_id',
'         , prcs.prcs_last_update = sysdate',
'     where prcs.prcs_dgrm_name = l_dgrm_name ',
'       and prcs.prcs_id = p_process_id',
'         ;',
'  exception',
'    when others',
'    then',
'      raise;',
'  end flow_start;',
'  procedure flow_next_step',
'  ( p_process_id in flow_processes.prcs_id%type',
'  )',
'  is',
'    l_dgrm_name        flow_diagrams.dgrm_name%type;',
'    l_prcs_current     flow_processes.prcs_current%type;',
'    l_conn_target_ref  flow_connections.conn_target_ref%type;',
'    l_source_objt_type flow_objects.objt_type%TYPE;',
'    l_target_objt_type flow_objects.objt_type%TYPE;',
'  begin',
'    l_dgrm_name:= get_dgrm_name( p_prcs_id => p_process_id);',
'    select prcs.prcs_current',
'      into l_prcs_current',
'      from flow_processes prcs',
'     where prcs.prcs_id = p_process_id',
'         ;',
'    -- Go to next process step',
'    -- From process to process or subprocess to subprocess',
'    begin',
'        select conn.conn_target_ref',
'             , objt_source.objt_type',
'             , objt_target.objt_type',
'          into l_conn_target_ref',
'             , l_source_objt_type',
'             , l_target_objt_type',
'          from flow_connections conn',
'          join flow_objects objt_source on (conn.conn_source_ref = objt_source.objt_id)',
'          join flow_objects objt_target on (conn.conn_target_ref = objt_target.objt_id)',
'         where conn.conn_source_ref = l_prcs_current',
'           and conn.conn_dgrm_name = l_dgrm_name',
'      group by conn.conn_target_ref',
'             , objt_source.objt_type',
'             , objt_target.objt_type',
'             ;',
'    exception',
'    when NO_DATA_FOUND',
'    then',
'      null;',
'    end;',
'    -- Enter subprocees and go to first step',
'    if (l_source_objt_type = ''PROCESS'' and l_target_objt_type = ''SUB_PROCESS'')',
'    then',
'      select objt.objt_id',
'        into l_conn_target_ref',
'        from flow_objects objt',
'       where objt.objt_incoming IS NULL',
'         and objt.objt_origin = ',
'             ( select conn.conn_target_ref',
'                 from flow_connections conn',
'                 join flow_objects objt_source on (conn.conn_source_ref = objt_source.objt_id)',
'                 join flow_objects objt_target on (conn.conn_target_ref = objt_target.objt_id)',
'                where conn.conn_source_ref = l_prcs_current',
'                  and conn.conn_dgrm_name = l_dgrm_name',
'             );',
'    ',
'    -- Exit subprocess and go to next step',
'    elsif l_target_objt_type is null',
'    then',
'      select conn.conn_target_ref',
'        into l_conn_target_ref',
'        from flow_connections conn',
'       where conn.conn_source_ref = ',
'             ( select objt.objt_origin',
'                 from flow_objects objt',
'                where objt.objt_id = l_prcs_current',
'                  and conn.conn_dgrm_name = l_dgrm_name',
'             );',
'    end if;',
'    update flow_processes prcs',
'       set prcs.prcs_current = l_conn_target_ref',
'         , prcs.prcs_last_update = sysdate',
'     where prcs.prcs_dgrm_name = l_dgrm_name',
'       and prcs.prcs_id = p_process_id',
'         ;',
'  exception',
'    when TOO_MANY_ROWS',
'    then',
'      apex_error.add_error',
'      ( p_message => ''Branch instead of next step was found.''',
'      , p_display_location => apex_error.c_on_error_page',
'      );',
'    when NO_DATA_FOUND',
'    then',
'      apex_error.add_error',
'      ( p_message => ''Next step does not exist.''',
'      , p_display_location => apex_error.c_on_error_page',
'      );',
'    when others',
'    then',
'      raise;',
'  end flow_next_step;',
'  procedure flow_next_branch',
'  ( p_process_id  in flow_processes.prcs_id%type',
'  , p_branch_name in varchar2',
'  )',
'  is',
'    l_dgrm_name       flow_diagrams.dgrm_name%type;',
'    l_conn_target_ref flow_connections.conn_target_ref%type;',
'    l_prcs_current    flow_processes.prcs_current%type;',
'  begin',
'    -- get diagram name and current state',
'    select prcs.prcs_dgrm_name',
'         , prcs.prcs_current',
'      into l_dgrm_name',
'         , l_prcs_current',
'      from flow_processes prcs',
'     where prcs.prcs_id = p_process_id',
'         ;',
'    begin',
'      select conn.conn_target_ref',
'        into l_conn_target_ref',
'        from flow_connections conn',
'       where conn.conn_source_ref = l_prcs_current',
'         and conn.conn_dgrm_name = l_dgrm_name',
'         and conn.conn_name = p_branch_name',
'           ;',
'      update flow_processes prcs',
'         set prcs.prcs_current = l_conn_target_ref',
'           , prcs.prcs_last_update = sysdate',
'       where prcs.prcs_dgrm_name = l_dgrm_name',
'         and prcs.prcs_id = p_process_id',
'           ;',
'    exception',
'    when NO_DATA_FOUND ',
'    then',
'      apex_error.add_error',
'      ( p_message => ''No branch was found.''',
'      , p_display_location => apex_error.c_on_error_page',
'      );',
'    end;',
'    ',
'  exception',
'    when others',
'    then',
'      raise;',
'  end flow_next_branch;',
'  procedure flow_reset',
'  ( p_process_id in flow_processes.prcs_id%type',
'  )',
'  is',
'  begin',
'    update flow_processes prcs',
'       set prcs.prcs_current = null',
'         , prcs.prcs_last_update = sysdate',
'     where prcs.prcs_id = p_process_id',
'         ;',
'  exception',
'    when others',
'    then',
'      raise;',
'  end flow_reset;',
'  procedure flow_delete',
'  ( p_process_id in flow_processes.prcs_id%type',
'  )',
'  is',
'  begin',
'    delete',
'      from flow_processes prcs',
'     where prcs.prcs_id = p_process_id',
'         ;',
'         ',
'  exception',
'    when others',
'    then',
'      raise;',
'  end flow_delete;',
'',
'end flow_api_pkg;',
'/',
'',
'',
'create or replace package flow_bpmn_parser_pkg',
'as',
'  procedure parse',
'  (',
'    p_diagram_name in flow_diagrams.dgrm_name%type',
'  );',
'end;',
'/',
'',
'',
'create or replace package body flow_bpmn_parser_pkg',
'as',
'  subtype t_vc50  is varchar2(50 char);',
'  procedure upload_diagram',
'  (',
'    p_diagram_name in flow_diagrams.dgrm_name%type',
'  )',
'  as',
'  begin',
'    merge into flow_diagrams d',
'         using (select ac.clob001',
'                     , td.p_diagram_name',
'                  from apex_collections ac',
'                     , (select p_diagram_name from dual) td',
'                 where ac.collection_name = ''CLOB_CONTENT''',
'               ) s',
'            on ( d.dgrm_name = s.p_diagram_name )',
'      when matched then',
'        update',
'           set d.dgrm_content = s.clob001',
'      when not matched then',
'        insert ( d.dgrm_name, d.dgrm_content )',
'        values ( s.p_diagram_name, s.clob001 )',
'    ;',
'  end upload_diagram;',
'  procedure cleanup_parsing_tables',
'  (',
'    p_diagram_name in flow_diagrams.dgrm_name%type',
'  )',
'  as',
'  begin',
'    delete',
'      from flow_connections conn',
'     where conn.conn_dgrm_name = p_diagram_name',
'    ;',
'    delete',
'      from flow_objects objt',
'     where objt.objt_dgrm_name = p_diagram_name',
'    ;',
'  end cleanup_parsing_tables;',
'  procedure insert_object',
'  (',
'    p_objt_dgrm_name in flow_objects.objt_dgrm_name%type',
'  , p_objt_id       in flow_objects.objt_id%type',
'  , p_objt_name     in flow_objects.objt_name%type default null',
'  , p_objt_type     in flow_objects.objt_type%type default null',
'  , p_objt_tag_name in flow_objects.objt_tag_name%type default null',
'  , p_objt_incoming in flow_objects.objt_incoming%type default null',
'  , p_objt_outgoing in flow_objects.objt_outgoing%type default null',
'  , p_objt_origin   in flow_objects.objt_origin%type default null',
'  )',
'  as',
'  begin',
'    insert',
'      into flow_objects',
'           (',
'             objt_dgrm_name',
'           , objt_id',
'           , objt_name',
'           , objt_type',
'           , objt_tag_name',
'           , objt_incoming',
'           , objt_outgoing',
'           , objt_origin',
'           )',
'    values (',
'             p_objt_dgrm_name',
'           , p_objt_id',
'           , p_objt_name',
'           , p_objt_type',
'           , p_objt_tag_name',
'           , p_objt_incoming',
'           , p_objt_outgoing',
'           , p_objt_origin',
'           )',
'    ;',
'  end insert_object;',
'  procedure insert_connection',
'  (',
'    p_conn_dgrm_name   in flow_connections.conn_dgrm_name%type',
'  , p_conn_id         in flow_connections.conn_id%type',
'  , p_conn_name       in flow_connections.conn_name%type',
'  , p_conn_source_ref in flow_connections.conn_source_ref%type',
'  , p_conn_target_ref in flow_connections.conn_target_ref%type',
'  , p_conn_type       in flow_connections.conn_type%type',
'  , p_conn_tag_name   in flow_connections.conn_tag_name%type',
'  , p_conn_origin     in flow_connections.conn_origin%type',
'  )',
'  as',
'  begin',
'    insert',
'      into flow_connections',
'            (',
'              conn_dgrm_name',
'            , conn_id',
'            , conn_name',
'            , conn_source_ref',
'            , conn_target_ref',
'            , conn_type',
'            , conn_tag_name',
'            , conn_origin',
'            )',
'    values (',
'              p_conn_dgrm_name',
'            , p_conn_id',
'            , p_conn_name',
'            , p_conn_source_ref',
'            , p_conn_target_ref',
'            , p_conn_type',
'            , p_conn_tag_name',
'            , p_conn_origin',
'            )',
'    ;',
'  end insert_connection;',
'  procedure parse_steps',
'  (',
'    p_diagram_name in flow_diagrams.dgrm_name%type',
'  , p_xml          in xmltype',
'  , p_proc_type    in t_vc50',
'  , p_proc_id      in t_vc50',
'  )',
'  as',
'  begin',
'    for rec in (',
'        select steps.steps_type',
'             , steps.steps_name',
'             , steps.steps_id',
'             , steps.source_ref',
'             , steps.target_ref',
'             , listagg( cons.incoming, ''|'' ) within group ( order by cons.incoming ) as flows_in',
'             , listagg( cons.outgoing, ''|'' ) within group ( order by cons.outgoing ) as flows_out',
'          from xmltable',
'               (',
'                 xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn")',
'               , ''*'' passing p_xml',
'                 columns',
'                   steps_type varchar2(50 char)  path ''name()''',
'                 , steps_name varchar2(200 char) path ''@name''',
'                 , steps_id   varchar2(50 char)  path ''@id''',
'                 , source_ref varchar2(50 char)  path ''@sourceRef''',
'                 , target_ref varchar2(50 char)  path ''@targetRef''',
'                 , inout      xmltype            path ''*'' default xmltype(''<dummy>dummy</dummy>'')',
'               ) steps',
'             , xmltable',
'               (',
'                 xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn")',
'               , ''*'' passing steps.inout',
'                 columns',
'                   incoming varchar2(50 char) path ''/bpmn:incoming/text()''',
'                 , outgoing varchar2(50 char) path ''/bpmn:outgoing/text()''',
'               ) cons',
'      group by steps.steps_type',
'             , steps.steps_name',
'             , steps.steps_id',
'             , steps.source_ref',
'             , steps.target_ref',
'    ) loop',
'      case',
'        -- We ignore Incoming and Outgoing here,',
'        -- because those become attributes on existing connections',
'        when rec.steps_type in (''bpmn:incoming'', ''bpmn:outgoing'') then',
'          null;',
'        when rec.source_ref is null then -- assume objects don''t have a sourceRef attribute',
'          insert_object',
'          (',
'            p_objt_dgrm_name => p_diagram_name',
'          , p_objt_id       => rec.steps_id',
'          , p_objt_name     => rec.steps_name',
'          , p_objt_type     => p_proc_type',
'          , p_objt_tag_name => rec.steps_type',
'          , p_objt_incoming => rec.flows_in',
'          , p_objt_outgoing => rec.flows_out',
'          , p_objt_origin   => p_proc_id',
'          );',
'        else',
'          insert_connection',
'          (',
'            p_conn_dgrm_name   => p_diagram_name',
'          , p_conn_id         => rec.steps_id',
'          , p_conn_name       => rec.steps_name',
'          , p_conn_source_ref => rec.source_ref',
'          , p_conn_target_ref => rec.target_ref',
'          , p_conn_type       => p_proc_type',
'          , p_conn_tag_name   => rec.steps_type',
'          , p_conn_origin     => p_proc_id',
'          );',
'      end case;',
'    end loop;  ',
'  end parse_steps;',
'  procedure parse_xml',
'  (',
'    p_diagram_name in flow_diagrams.dgrm_name%type',
'  , p_xml          in xmltype',
'  , p_parent_id    in t_vc50',
'  )',
'  as',
'  begin',
'    if p_parent_id is null then',
'      for rec in (',
'                 select proc.proc_id',
'                      , case proc.proc_type when ''bpmn:subProcess'' then ''SUB_PROCESS'' else ''PROCESS'' end as proc_type',
'                      , proc.proc_steps',
'                      , proc.proc_sub_procs',
'                   from xmltable',
'                      (',
'                        xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn")',
'                      , ''/bpmn:definitions/bpmn:process'' passing p_xml',
'                        columns',
'                          proc_id        varchar2(50 char) path ''@id''',
'                        , proc_type      varchar2(50 char) path ''name()''',
'                        , proc_steps     xmltype           path ''* except bpmn:subProcess''',
'                        , proc_sub_procs xmltype           path ''bpmn:subProcess''',
'                      ) proc',
'                 )',
'      loop',
'        parse_steps( p_diagram_name => p_diagram_name, p_xml => rec.proc_steps, p_proc_type => rec.proc_type, p_proc_id => rec.proc_id );',
'        if rec.proc_sub_procs is not null then',
'          parse_xml( p_diagram_name => p_diagram_name, p_xml => rec.proc_sub_procs, p_parent_id => rec.proc_id );',
'        end if;        ',
'      end loop;',
'    else',
'      for rec in (',
'                 select proc.proc_id',
'                      , case proc.proc_type when ''bpmn:subProcess'' then ''SUB_PROCESS'' else ''PROCESS'' end as proc_type',
'                      , proc.proc_steps',
'                      , proc.proc_sub_procs',
'                   from xmltable',
'                      (',
'                        xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn")',
'                      , ''bpmn:subProcess'' passing p_xml',
'                        columns',
'                          proc_id        varchar2(50 char) path ''@id''',
'                        , proc_type      varchar2(50 char) path ''name()''',
'                        , proc_steps     xmltype           path ''* except bpmn:subProcess''',
'                        , proc_sub_procs xmltype           path ''bpmn:subProcess''',
'                      ) proc',
'                 )',
'      loop',
'        -- We add an entry for a sub process here,',
'        -- as it is an object within the master process',
'        insert_object',
'        (',
'            p_objt_dgrm_name => p_diagram_name',
'          , p_objt_id       => rec.proc_id',
'          , p_objt_type     => rec.proc_type',
'          , p_objt_origin   => p_parent_id',
'        );',
'        parse_steps',
'        ( ',
'          p_diagram_name => p_diagram_name',
'        , p_xml => rec.proc_steps',
'        , p_proc_type => rec.proc_type',
'        , p_proc_id => rec.proc_id',
'        );',
'        -- We go into recursion if we found any sub process',
'        if rec.proc_sub_procs is not null then',
'          parse_xml',
'          (',
'            p_diagram_name => p_diagram_name',
'          , p_xml => rec.proc_sub_procs',
'          , p_parent_id => rec.proc_id',
'          );',
'        end if;        ',
'      end loop;',
'    end if;',
'  end parse_xml;',
'  ',
'  procedure parse_collaboration',
'  (',
'    p_diagram_name in flow_diagrams.dgrm_name%type',
'  , p_xml          in xmltype',
'  )',
'  as',
'  begin',
'    for rec in (',
'                 select colab_id',
'                      , colab_name',
'                      , colab_type',
'                      , colab_src_ref',
'                      , colab_tgt_ref',
'                   from xmltable',
'                        (',
'                          xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn")',
'                        , ''/bpmn:definitions/bpmn:collaboration/*'' passing p_xml',
'                          columns',
'                            colab_id      varchar2(50 char)  path ''@id''',
'                          , colab_name    varchar2(200 char) path ''@name''',
'                          , colab_type    varchar2(50 char)  path ''name()''',
'                          , colab_src_ref varchar2(50 char)  path ''@sourceRef''',
'                          , colab_tgt_ref varchar2(50 char)  path ''@targetRef''',
'                        ) colab    ',
'    ) loop',
'    ',
'      case',
'        when rec.colab_src_ref is null then',
'          insert_object',
'          (',
'            p_objt_dgrm_name => p_diagram_name',
'          , p_objt_id        => rec.colab_id',
'          , p_objt_name      => rec.colab_name',
'          , p_objt_type      => null',
'          , p_objt_tag_name  => rec.colab_type',
'          , p_objt_incoming  => null',
'          , p_objt_outgoing  => null',
'          , p_objt_origin    => null',
'          );',
'        else',
'          insert_connection',
'          (',
'            p_conn_dgrm_name   => p_diagram_name',
'          , p_conn_id          => rec.colab_id',
'          , p_conn_name        => rec.colab_name',
'          , p_conn_source_ref  => rec.colab_src_ref',
'          , p_conn_target_ref  => rec.colab_tgt_ref',
'          , p_conn_type        => null',
'          , p_conn_tag_name    => rec.colab_type',
'          , p_conn_origin      => null',
'          );          ',
'      end case;',
'    ',
'    end loop;',
'    ',
'  end parse_collaboration;',
'  ',
'  procedure parse',
'  (',
'    p_diagram_name in flow_diagrams.dgrm_name%type',
'  )',
'  as',
'    l_dgrm_content clob;',
'  begin',
'    -- take over the XML stored in the APEX collection into table flow_diagrams',
'    upload_diagram( p_diagram_name => p_diagram_name );',
'    ',
'    -- delete any existing parsed information before parsing again',
'    cleanup_parsing_tables( p_diagram_name => p_diagram_name );',
'    ',
'    -- get the CLOB content',
'    select dgrm_content',
'      into l_dgrm_content',
'      from flow_diagrams',
'     where dgrm_name = p_diagram_name',
'    ;',
'    ',
'    -- Parse Top Level Collaboration once',
'    parse_collaboration( p_diagram_name => p_diagram_name, p_xml => xmltype(l_dgrm_content) );',
'    ',
'    -- start recursive processsing of remaining xml structures',
'    parse_xml( p_diagram_name => p_diagram_name, p_xml => xmltype(l_dgrm_content), p_parent_id => null );',
'  end parse;',
'  ',
'end flow_bpmn_parser_pkg;',
'/'))
);
wwv_flow_api.component_end;
end;
/
