prompt --application/deployment/install/install_packages_spec
begin
--   Manifest
--     INSTALL: INSTALL-Packages Spec
--   Manifest End
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.create_install_script(
 p_id=>wwv_flow_api.id(8806949341382474)
,p_install_id=>wwv_flow_api.id(14200193318202500)
,p_name=>'Packages Spec'
,p_sequence=>30
,p_script_type=>'INSTALL'
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'create or replace package flow_types_pkg',
'  authid definer',
'as',
'',
'  subtype t_bpmn_id             is varchar2(50 char);',
'  subtype t_bpmn_attributes_key is varchar2(50 char);',
'  subtype t_bpmn_attribute_vc2  is varchar2(4000 char);',
'',
'  subtype t_single_vc2         is varchar2(1 char);',
'',
'  subtype t_expr_type          is varchar2(130 char);',
'  subtype t_expr_set           is varchar2(20 char);',
'',
'  type flow_step_info is record',
'  ( dgrm_id            flow_diagrams.dgrm_id%type',
'  , source_objt_tag    flow_objects.objt_tag_name%type',
'  , source_objt_id     flow_objects.objt_id%type',
'  , target_objt_id     flow_objects.objt_id%type',
'  , target_objt_ref    flow_objects.objt_bpmn_id%type',
'  , target_objt_tag    flow_objects.objt_tag_name%type',
'  , target_objt_subtag flow_objects.objt_sub_tag_name%type',
'  );',
'',
'end flow_types_pkg;',
'/',
'',
'create or replace package flow_constants_pkg',
'  authid definer',
'as',
'',
'  gc_version constant varchar2(10 char) := ''21.1.0'';',
'',
'  gc_vcbool_true   constant varchar2(10 char) := ''true'';',
'  gc_vcbool_false  constant varchar2(10 char) := ''false'';',
'  gc_numbool_true  constant number            := 1;',
'  gc_numbool_false constant number            := 0;',
'',
'  gc_nsmap       constant varchar2(200 char) := ''xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL"'';',
'  gc_bpmn_prefix constant varchar2(10 char)  := ''bpmn:'';',
'  gc_apex_prefix constant varchar2(10 char)  := ''apex:'';',
'',
'  -- BPMN Keys',
'  gc_bpmn_process                     constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''process'';',
'  gc_bpmn_subprocess                  constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''subProcess'';',
'',
'  gc_bpmn_start_event                 constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''startEvent'';',
'  gc_bpmn_end_event                   constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''endEvent'';',
'  gc_bpmn_intermediate_throw_event    constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''intermediateThrowEvent'';',
'  gc_bpmn_intermediate_catch_event    constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''intermediateCatchEvent'';',
'  gc_bpmn_boundary_event              constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''boundaryEvent'';',
'',
'  gc_bpmn_terminate_event_definition  constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''terminateEventDefinition'';',
'  gc_bpmn_error_event_definition      constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''errorEventDefinition'';',
'  gc_bpmn_escalation_event_definition constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''escalationEventDefinition'';',
'  gc_bpmn_link_event_definition       constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''linkEventDefinition'';',
'',
'  gc_bpmn_timer_event_definition      constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''timerEventDefinition'';',
'  gc_timer_type_date                  constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''timeDate'';',
'  gc_timer_type_duration              constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''timeDuration'';',
'  gc_timer_type_cycle                 constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''timeCycle'';',
'',
'  gc_bpmn_object_documentation        constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''documentation'';',
'',
'  gc_bpmn_gateway_exclusive           constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''exclusiveGateway'';',
'  gc_bpmn_gateway_inclusive           constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''inclusiveGateway'';',
'  gc_bpmn_gateway_parallel            constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''parallelGateway'';',
'  gc_bpmn_gateway_event_based         constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''eventBasedGateway'';',
'',
'  gc_bpmn_sequence_flow               constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''sequenceFlow'';',
'',
'  gc_bpmn_task                        constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''task'';',
'  gc_bpmn_usertask                    constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''userTask'';',
'  gc_bpmn_servicetask                 constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''serviceTask'';',
'  gc_bpmn_manualtask                  constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''manualTask'';',
'  gc_bpmn_scripttask                  constant flow_types_pkg.t_bpmn_id := gc_bpmn_prefix || ''scriptTask'';',
'',
'  -- APEX Extensions to BPMN',
'  -- userTask',
'  gc_apex_usertask_application        constant flow_types_pkg.t_bpmn_id := gc_apex_prefix || ''apex-application'';',
'  gc_apex_usertask_page               constant flow_types_pkg.t_bpmn_id := gc_apex_prefix || ''apex-page'';',
'  gc_apex_usertask_request            constant flow_types_pkg.t_bpmn_id := gc_apex_prefix || ''apex-request'';',
'  gc_apex_usertask_cache              constant flow_types_pkg.t_bpmn_id := gc_apex_prefix || ''apex-cache'';',
'  gc_apex_usertask_item               constant flow_types_pkg.t_bpmn_id := gc_apex_prefix || ''apex-item'';',
'  gc_apex_usertask_value              constant flow_types_pkg.t_bpmn_id := gc_apex_prefix || ''apex-value'';',
'  gc_apex_usertask_inserturl          constant flow_types_pkg.t_bpmn_id := gc_apex_prefix || ''apex-insertUrl'';',
'',
'  --serviceTask',
'  --gc_apex_servicetask_insertemail     constant flow_types_pkg.t_bpmn_id := gc_apex_prefix || ''insertEmail'';',
'',
'  --scriptTask',
'  gc_apex_scripttask_engine           constant flow_types_pkg.t_bpmn_id := gc_apex_prefix || ''engine'';',
'  gc_apex_scripttask_plsql_code       constant flow_types_pkg.t_bpmn_id := gc_apex_prefix || ''plsqlCode'';',
'  gc_apex_scripttask_auto_binds       constant flow_types_pkg.t_bpmn_id := gc_apex_prefix || ''autoBinds'';',
'',
'  --terminateEndEvent',
'  gc_apex_process_status              constant flow_types_pkg.t_bpmn_id := gc_apex_prefix || ''processStatus'';',
'',
'  -- Special Keys from FLOW_OBJECT_ATTRIBUTES',
'  gc_timer_type_key                   constant flow_types_pkg.t_bpmn_id := ''timerType'';',
'  gc_timer_def_key                    constant flow_types_pkg.t_bpmn_id := ''timerDefinition'';',
'  gc_terminate_result                 constant flow_types_pkg.t_bpmn_id := ''processStatus'';',
'',
'  -- Flows 4 APEX Substitution Strings',
'  gc_substitution_flow_identifier     constant varchar2(10 char)                    := ''F4A$'';',
'  gc_substitution_prefix              constant flow_types_pkg.t_single_vc2          := ''&'';',
'  gc_substitution_postfix             constant flow_types_pkg.t_single_vc2          := ''.'';',
'  gc_substitution_process_id          constant flow_types_pkg.t_bpmn_attributes_key := ''PROCESS_ID'';',
'  gc_substitution_subflow_id          constant flow_types_pkg.t_bpmn_attributes_key := ''SUBFLOW_ID'';',
'  gc_substitution_pattern             constant flow_types_pkg.t_bpmn_attributes_key := gc_substitution_prefix || ''F4A\$(\w*)\.'';',
'',
'  -- Diagram Versioning Status',
'  gc_dgrm_status_draft                constant  varchar2(10 char) := ''draft'';',
'  gc_dgrm_status_released             constant  varchar2(10 char) := ''released'';',
'  gc_dgrm_status_deprecated           constant  varchar2(10 char) := ''deprecated'';',
'  gc_dgrm_status_archived             constant  varchar2(10 char) := ''archived'';',
'',
'  -- Subflow status',
'  gc_sbfl_status_created              constant  varchar2(20 char) := ''created'';',
'  gc_sbfl_status_running              constant  varchar2(20 char) := ''running'';',
'  gc_sbfl_status_waiting_timer        constant  varchar2(20 char) := ''waiting for timer'';',
'  gc_sbfl_status_waiting_gateway      constant  varchar2(20 char) := ''waiting at gateway'';',
'  gc_sbfl_status_waiting_event        constant  varchar2(20 char) := ''waiting for event'';',
'  gc_sbfl_status_proceed_gateway      constant  varchar2(20 char) := ''proceed from gateway'';',
'  gc_sbfl_status_split                constant  varchar2(20 char) := ''split'';',
'  gc_sbfl_status_in_subprocess        constant  varchar2(20 char) := ''in subprocess'';',
'  gc_sbfl_status_error                constant  varchar2(20 char) := ''error'';',
'  gc_sbfl_status_completed            constant  varchar2(20 char) := ''completed'';  -- note sbfl deleted after completion',
'',
'  -- Process Instance Status',
'  gc_prcs_status_created              constant  varchar2(20 char) := ''created'';',
'  gc_prcs_status_running              constant  varchar2(20 char) := ''running'';',
'  gc_prcs_status_completed            constant  varchar2(20 char) := ''completed'';',
'  gc_prcs_status_terminated           constant  varchar2(20 char) := ''terminated'';',
'  gc_prcs_status_error                constant  varchar2(20 char) := ''error'';',
'',
'  -- Process Instance Events',
'  gc_prcs_event_created              constant  varchar2(20 char) := gc_prcs_status_created;',
'  gc_prcs_event_started              constant  varchar2(20 char) := ''started'';',
'  gc_prcs_event_completed            constant  varchar2(20 char) := gc_prcs_status_completed;',
'  gc_prcs_event_terminated           constant  varchar2(20 char) := gc_prcs_status_terminated;',
'  gc_prcs_event_reset                constant  varchar2(20 char) := ''reset'';',
'  gc_prcs_event_error                constant  varchar2(20 char) := gc_prcs_status_error;',
'  gc_prcs_event_restart_step         constant  varchar2(20 char) := ''restart step'';',
'  gc_prcs_event_deleted              constant  varchar2(20 char) := ''deleted'';',
'',
'  -- Process Variable Datatypes',
'',
'  gc_prov_var_type_varchar2           constant  varchar2(50 char) := ''VARCHAR2'';',
'  gc_prov_var_type_date               constant  varchar2(50 char) := ''DATE'';',
'  gc_prov_var_type_number             constant  varchar2(50 char) := ''NUMBER'';',
'  gc_prov_var_type_clob               constant  varchar2(50 char) := ''CLOB'';',
'',
'  gc_prov_default_date_format         constant  varchar2(30 char) := ''YYYY-MM-DD HH24:MI:SS'';',
'',
'  -- Standard Process Variables',
'',
'  gc_prov_builtin_business_ref        constant  varchar2(50 char) := ''BUSINESS_REF'';',
'',
'  -- Process Variable Expression Types',
'  gc_expr_type_static                 constant flow_types_pkg.t_expr_type := ''static'';',
'  gc_expr_type_proc_var               constant flow_types_pkg.t_expr_type := ''processVariable'';',
'  gc_expr_type_item                   constant flow_types_pkg.t_expr_type := ''item'';',
'  gc_expr_type_sql                    constant flow_types_pkg.t_expr_type := ''sqlQuerySingle'';',
'  gc_expr_type_sql_delimited_list     constant flow_types_pkg.t_expr_type := ''sqlQueryList'';',
'  gc_expr_type_plsql_function_body    constant flow_types_pkg.t_expr_type := ''plsqlFunctionBody'';',
'  gc_expr_type_plsql_expression       constant flow_types_pkg.t_expr_type := ''plsqlExpression'';',
'',
'-- Process Variable Expression set := ''BeforeTask'';',
'  gc_expr_set_before_task             constant flow_types_pkg.t_expr_set := ''beforeTask'';',
'  gc_expr_set_after_task              constant flow_types_pkg.t_expr_set := ''afterTask'';',
'  gc_expr_set_before_split            constant flow_types_pkg.t_expr_set := ''beforeSplit'';',
'  gc_expr_set_after_merge             constant flow_types_pkg.t_expr_set := ''afterMerge'';',
'  gc_expr_set_before_event            constant flow_types_pkg.t_expr_set := ''beforeEvent'';',
'  gc_expr_set_on_event                constant flow_types_pkg.t_expr_set := ''onEvent'';',
'',
'-- Config Parameter Keys',
'',
'  gc_config_logging_level             constant varchar2(50 char) := ''logging_level'';',
'  gc_config_logging_hide_userid       constant varchar2(50 char) := ''logging_hide_userid'';',
'  gc_config_logging_language          constant varchar2(50 char) := ''logging_language'';',
'',
'-- Config Parameter Valid Values (when not true / false or numeric)',
'',
'  gc_config_logging_level_none        constant varchar2(2000 char) := ''none'';      -- none',
'  gc_config_logging_level_standard    constant varchar2(2000 char) := ''standard'';  -- instances and tasks',
'  gc_config_logging_level_secure      constant varchar2(2000 char) := ''secure'';    -- standard + diagram changes',
'  gc_config_logging_level_full        constant varchar2(2000 char) := ''full'';      -- secure + variable changes',
'',
'',
'-- Config Parameter Default Values',
'',
'  gc_config_default_logging_level             constant varchar2(2000 char) := gc_config_logging_level_standard;',
'  gc_config_default_logging_hide_userid       constant varchar2(2000 char) := ''false'';',
'  gc_config_default_logging_language          constant varchar2(2000 char) := ''en-us'';',
'',
'',
'',
'  -- Default XML for new diagrams',
'  gc_default_xml constant varchar2(4000) := ''<?xml version="1.0" encoding="UTF-8"?>',
'<bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" id="Definitions_1wzb475" targetNamespace="http://bpmn.io/schema/b'
||'" exporter="Flows for APEX" exporterVersion="'' || gc_version || ''">',
'<bpmn:process id="Process_0rxermh" isExecutable="false" />',
'<bpmndi:BPMNDiagram id="BPMNDiagram_1">',
'<bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_0rxermh" />',
'</bpmndi:BPMNDiagram>',
'</bpmn:definitions>',
''';',
'',
'',
'end flow_constants_pkg;',
'/',
'',
'create or replace package flow_api_pkg',
'as',
'',
'/********************************************************************************',
'**',
'**        FLOW INSTANCE OPERATIONS (Create, Start, Reset, Terminate, Delete)',
'**        STEP OPERATIONS (Reserve, Release, Complete)',
'**',
'********************************************************************************/',
'',
'/***',
'Function flow_create',
'creates a new process instance based on a diagram name and version (process specification)',
'If the version is not specified,',
'  first lookup is to use dgrm_status = ''released''',
'  second lookup is to use dgrm_version = ''0'' and dgrm_status = ''draft''',
'If nothing is found based on above rules an exception will be raised.',
'For accuracy, it''s recommended that you specify a version or use the form of flow_create specifying dgrm_id directly.',
'Returns: Process ID of the newly created process',
'*/',
'  function flow_create',
'  ( ',
'    pi_dgrm_name in flow_diagrams.dgrm_name%type',
'  , pi_dgrm_version in flow_diagrams.dgrm_version%type default null',
'  , pi_prcs_name in flow_processes.prcs_name%type',
'  ) return flow_processes.prcs_id%type;',
'',
'/***',
'Function flow_create',
'creates a new process instance based on a diagram id and version (process specification)',
'Returns: Process ID of the newly created process',
'*/',
'  function flow_create',
'  (',
'    pi_dgrm_id   in flow_diagrams.dgrm_id%type',
'  , pi_prcs_name in flow_processes.prcs_name%type',
'  ) return flow_processes.prcs_id%type;',
'',
'/***',
'Procedure  flow_create',
'creates a new process instance based on a diagram name and version (process specification)',
'if the version is not specified, it looks for a copy of the diagram having dgrm_status = ''released''',
'For accuracy, it''s recommended that you specify a version or use the form of flow_create specifying dgrm_id directly.',
'*/',
'  procedure flow_create',
'  (',
'    pi_dgrm_name in flow_diagrams.dgrm_name%type',
'  , pi_dgrm_version in flow_diagrams.dgrm_version%type default null',
'  , pi_prcs_name in flow_processes.prcs_name%type',
'  );',
'/***',
'Procedure flow_create',
'creates a new process instance based on a diagram id and version (process specification)',
'*/',
'  procedure flow_create',
'  (',
'    pi_dgrm_id   in flow_diagrams.dgrm_id%type',
'  , pi_prcs_name in flow_processes.prcs_name%type',
'  );',
'/***',
'Procedure flow_start',
'Starts a process that was previously created by flow_create.',
'Flow_start will create the initial subflow, set the current event to the diagram''s start event, ',
'then step on to the next object in the process diagram',
'*/',
'  procedure flow_start',
'  (',
'    p_process_id in flow_processes.prcs_id%type',
'  );',
'/***',
'Procedure flow_reserve_step',
'Reservation is a light-weight process for a user to indicate to other users that he/she intends to work on ',
'the current task in order to prevent multiple users working on the same task at the same time.',
'A reservation is typically made by supplying the reserving user''s username as the p_reservation parameter ',
'(although an application could come up with some other scheme for the reservation parameter, and so it is not ',
'restricted to being a userid).  Other users will be able to see that a reservation has been placed on a step.',
'Reservations are purely a signalling mechanism;  no enforcement is taken in the engine ',
'to restrict other users from undertaking a task reserved by somebody.',
'A reservation can be released using the flow_release_step procedure.',
'A reservation applies only to the current task waiting to be completed.  Once the task is completed, there is ',
'no reservation carried forward onto future tasks in the process.',
'Reservation is not an authorization control, and is not security relevant / enforcing in the engine.',
'*/',
'    procedure flow_reserve_step',
'  (',
'    p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_reservation   in flow_subflows.sbfl_reservation%type',
'  );  ',
'/***',
'Procedure flow_release_step',
'Release step is part of the reservation process.  See documentation for flow_reserve_step.',
'Flow_release_step releases a previously made reservation.',
'*/',
'     procedure flow_release_step',
'  (',
'    p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  ); ',
'/***',
'Procedure flow_start_step',
'flow_start_step can optionally be called when a user is about to start working on a task.  flow_start_step records the start time for ',
'work on the task, which is used to distinguish betweeen time waiting for the task to get worked on and the time that it is actually ',
'being worked on. Flow_start_step does not perform any functional role in processing a flow instance, and is optional - but it ',
'just helps gather process performance statistics that distinguish queing time from processing time.  ',
'Despite being optional, a well formed, best-practice application will use this call so that process statistics can be captured.',
'*/',
'  procedure flow_start_step',
'  (',
'    p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  );',
'',
'/*** Procedure flow_restart_step',
'flow_restart_step is procedure that is designed to be called by an administrator to restart a scriptTask or serviceTask that has ',
'failed due to an error.  The intended usage is that the adminstrator can fix the script or edit the process data that caused the ',
'task to fail, and then restart the task using this call.  ',
'A comment can optionally be provided, which will be added to the task event log entry.',
'It should only be used on a subflow having a status of ''error''',
'*/',
'  procedure flow_restart_step',
'  (',
'    p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_comment       in flow_instance_event_log.lgpr_comment%type default null',
'  );',
'',
'/***',
'Procedure flow_complete_step',
'Flow_complete_step is called when a process step has been completed.  Calling flow_complete_step moves the process ',
'forward to the next object(s) in the process diagram, in acordance with the behaviour rules for the objects.',
'History:  Flow_complete_step replaces the flow_next_step call in versions prior to V5.  Unlike flow_next_step, flow_complete_step ',
'is used to move a process forward, regardless of the object type. ',
'*/',
'   procedure flow_complete_step',
'  (',
'    p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  ); ',
'',
'/***',
'Procedure flow_reset',
'flow_reset aborts all processing on a process instance, and returns it to the state when it was',
'initially created.  After a reset, you then need to call flow_start to re-start the process instance.',
'flow_reset is only provided for debug and test usage; for production usage, always delete and start a new process',
'After a reset: ',
'- process instance status is reset to created.  ',
'- process instance progress is deleted.',
'- process variables are LEFT untouched.',
'This is not meant for use in Production Systems.',
'*/',
'  procedure flow_reset',
'  ( ',
'    p_process_id  in flow_processes.prcs_id%type',
'  , p_comment     in flow_instance_event_log.lgpr_comment%type default null',
'  );',
'',
'  /***',
'Procedure flow_terminate',
'flow_delete ends all processing of a process instance, and has the same effect as processing a Terminating End Event inside a Flow Diagram.',
'It ends all subflows, but retains the process definition and the subflow logs for the process.',
'*/',
'  procedure flow_terminate',
'  ( ',
'    p_process_id  in flow_processes.prcs_id%type',
'  , p_comment     in flow_instance_event_log.lgpr_comment%type default null',
'  );',
'',
'  /***',
'Procedure flow_delete',
'flow_delete ends all processing of a process instance.  It removes all subflows and subflow logs of the process.',
'*/',
'  procedure flow_delete',
'  ( ',
'    p_process_id  in flow_processes.prcs_id%type',
'  , p_comment     in flow_instance_event_log.lgpr_comment%type default null    ',
'  );',
'',
' /********************************************************************************',
'**',
'**        APPLICATION HELPERS (URL Builder, etc.)',
'**',
'********************************************************************************/ ',
'',
'  -- get_current_usertask_url',
'  -- used to build a URL for the current task on the specified subflow',
'  -- this is used in, for example, task inboxes to create link to the APEX page that ',
'  -- should be called by the user to perform the current userTask object',
'  function get_current_usertask_url',
'  (',
'    p_process_id in flow_processes.prcs_id%type',
'  , p_subflow_id in flow_subflows.sbfl_id%type',
'  ) return varchar2;',
'',
'end flow_api_pkg;',
'/',
'',
'create or replace package flow_boundary_events',
'accessible by (flow_engine, flow_tasks, flow_timers_pkg)',
'is ',
'',
'  procedure set_boundary_timers ',
'  ( p_process_id in flow_processes.prcs_id%type',
'  , p_subflow_id in flow_subflows.sbfl_id%type',
'  );  ',
'',
'  procedure unset_boundary_timers ',
'  ( p_process_id in flow_processes.prcs_id%type',
'  , p_subflow_id in flow_subflows.sbfl_id%type',
'  );  ',
'',
'  procedure lock_child_boundary_timers',
'  ( p_process_id          in flow_processes.prcs_id%type',
'  , p_subflow_id          in flow_subflows.sbfl_id%type',
'  , p_parent_objt_bpmn_id in flow_objects.objt_bpmn_id%type',
'  ); ',
'',
'  procedure handle_interrupting_boundary_event',
'  ( p_process_id in flow_processes.prcs_id%type',
'  , p_subflow_id in flow_subflows.sbfl_id%type',
'  );',
'  procedure process_boundary_event',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_step_info     in flow_types_pkg.flow_step_info',
'  , p_par_sbfl      in flow_subflows.sbfl_id%type',
'  , p_process_level in flow_subflows.sbfl_process_level%type',
'  );',
'',
'end flow_boundary_events;',
'/',
'',
'create or replace package flow_bpmn_parser_pkg',
'  authid definer',
'as',
'',
'  function upload_diagram',
'  (',
'    pi_dgrm_name       in flow_diagrams.dgrm_name%type',
'  , pi_dgrm_version    in flow_diagrams.dgrm_version%type',
'  , pi_dgrm_category   in flow_diagrams.dgrm_category%type',
'  , pi_dgrm_content    in flow_diagrams.dgrm_content%type',
'  , pi_dgrm_status     in flow_diagrams.dgrm_status%type default flow_constants_pkg.gc_dgrm_status_draft',
'  , pi_force_overwrite in boolean default false',
'  ) return flow_diagrams.dgrm_id%type;',
'',
'  procedure upload_diagram',
'  (',
'    pi_dgrm_name     in flow_diagrams.dgrm_name%type',
'  , pi_dgrm_version  in flow_diagrams.dgrm_version%type',
'  , pi_dgrm_category in flow_diagrams.dgrm_category%type',
'  , pi_dgrm_content  in flow_diagrams.dgrm_content%type',
'  , pi_dgrm_status   in flow_diagrams.dgrm_status%type default flow_constants_pkg.gc_dgrm_status_draft',
'  , pi_force_overwrite in boolean default false',
'  );',
'',
'  procedure upload_and_parse',
'  (',
'    pi_dgrm_name     in flow_diagrams.dgrm_name%type',
'  , pi_dgrm_version  in flow_diagrams.dgrm_version%type',
'  , pi_dgrm_category in flow_diagrams.dgrm_category%type',
'  , pi_dgrm_content  in flow_diagrams.dgrm_content%type',
'  , pi_dgrm_status   in flow_diagrams.dgrm_status%type default flow_constants_pkg.gc_dgrm_status_draft',
'  , pi_force_overwrite in boolean default false',
'  );',
'',
'  procedure parse',
'  (',
'    pi_dgrm_id in flow_diagrams.dgrm_id%type',
'  );',
'',
'  procedure parse',
'  (',
'    pi_dgrm_name     in flow_diagrams.dgrm_name%type',
'  , pi_dgrm_version  in flow_diagrams.dgrm_version%type',
'  );',
'',
'  procedure update_diagram',
'  (',
'    pi_dgrm_id      in flow_diagrams.dgrm_id%type',
'  , pi_dgrm_content in flow_diagrams.dgrm_content%type',
'  );',
'',
'end flow_bpmn_parser_pkg;',
'/',
'',
'create or replace package flow_engine_util',
'-- accessible by (flow_engine, flow_gateways, flow_boundary_events, flow_timers_pkg, flow_logging)',
'as ',
'',
'  function get_dgrm_id',
'  (',
'    p_prcs_id in flow_processes.prcs_id%type',
'  ) return flow_processes.prcs_dgrm_id%type;',
'',
'  function get_config_value',
'  ( ',
'    p_config_key    in flow_configuration.cfig_key%type,',
'    p_default_value in flow_configuration.cfig_value%type',
'  ) return flow_configuration.cfig_value%type;',
'',
'  function check_subflow_exists',
'  (',
'    p_process_id in flow_processes.prcs_id%type',
'  , p_subflow_id in flow_subflows.sbfl_id%type',
'  ) return boolean;',
'',
'  function get_subprocess_parent_subflow',
'  ( p_process_id in flow_processes.prcs_id%type',
'  , p_subflow_id in flow_subflows.sbfl_id%type',
'  , p_current    in flow_objects.objt_bpmn_id%type -- an object in the subprocess',
'  ) return number;',
'',
'  procedure get_number_of_connections',
'  ( pi_dgrm_id                  in flow_diagrams.dgrm_id%type',
'  , pi_target_objt_id           in flow_connections.conn_tgt_objt_id%type',
'  , pi_conn_type                in flow_connections.conn_tag_name%type ',
'  , po_num_forward_connections  out number',
'  , po_num_back_connections     out number',
'  );',
'  ',
'  function get_subflow_info',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_lock_subflow  in boolean default false',
'  , p_lock_process  in boolean default false',
'  ) return flow_subflows%rowtype;',
'',
'  procedure subflow_complete',
'  ( p_process_id        in flow_processes.prcs_id%type',
'  , p_subflow_id        in flow_subflows.sbfl_id%type',
'  );',
'',
'  procedure terminate_level',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_process_level in flow_subflows.sbfl_process_level%type',
'  );',
'',
'  function subflow_start',
'    ( ',
'      p_process_id                in flow_processes.prcs_id%type',
'    , p_parent_subflow            in flow_subflows.sbfl_id%type',
'    , p_starting_object           in flow_objects.objt_bpmn_id%type',
'    , p_current_object            in flow_objects.objt_bpmn_id%type',
'    , p_route                     in flow_subflows.sbfl_route%type',
'    , p_last_completed            in flow_objects.objt_bpmn_id%type',
'    , p_status                    in flow_subflows.sbfl_status%type default flow_constants_pkg.gc_sbfl_status_running',
'    , p_parent_sbfl_proc_level    in flow_subflows.sbfl_process_level%type',
'    , p_new_proc_level            in boolean default false',
'    , p_dgrm_id                   in flow_diagrams.dgrm_id%type',
'    ) return flow_subflows.sbfl_id%type',
'    ;',
'',
'  function lock_subflow',
'  ( p_subflow_id    in flow_subflows.sbfl_id%type',
'  ) return boolean;',
'',
'end flow_engine_util;',
'/',
'',
'create or replace package flow_engine',
'accessible by (flow_api_pkg, flow_instances, flow_gateways, flow_tasks, ',
'               flow_boundary_events, flow_timers_pkg)',
'as ',
'  procedure flow_handle_event',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  ); ',
'procedure flow_complete_step',
'  ( p_process_id        in flow_processes.prcs_id%type',
'  , p_subflow_id        in flow_subflows.sbfl_id%type',
'  , p_forward_route     in flow_connections.conn_bpmn_id%type default null   ',
'  , p_log_as_completed  in boolean default true',
'  , p_recursive_call    in boolean default true',
'  );',
'',
'procedure start_step',
'  ( p_process_id          in flow_processes.prcs_id%type',
'  , p_subflow_id          in flow_subflows.sbfl_id%type',
'  , p_called_internally   in boolean default false',
'  );',
'',
'procedure restart_step',
'  ( p_process_id          in flow_processes.prcs_id%type',
'  , p_subflow_id          in flow_subflows.sbfl_id%type',
'  , p_comment             in flow_instance_event_log.lgpr_comment%type default null',
'  );',
'  ',
'end flow_engine;',
'/',
'',
'create or replace package flow_errors',
'as',
'',
'  procedure handle_instance_error',
'  ( pi_prcs_id        in flow_processes.prcs_id%type',
'  , pi_sbfl_id        in flow_subflows.sbfl_id%type default null',
'  , pi_message_key    in varchar2',
'  , p0                in varchar2 default null',
'  , p1                in varchar2 default null',
'  , p2                in varchar2 default null',
'  , p3                in varchar2 default null',
'  , p4                in varchar2 default null',
'  , p5                in varchar2 default null',
'  , p6                in varchar2 default null',
'  , p7                in varchar2 default null',
'  , p8                in varchar2 default null',
'  , p9                in varchar2 default null',
'  );',
'',
'  procedure set_error_status',
'  ( pi_prcs_id        in flow_processes.prcs_id%type',
'  , pi_sbfl_id        in flow_subflows.sbfl_id%type',
'  );',
'',
'end flow_errors;',
'/',
'',
'create or replace package flow_expressions',
'  authid current_user',
'  -- accessible by flow_engine, flow_process_vars ??',
'as ',
'  e_var_exp_date_format_error exception;',
'',
'  -- Call using objt_id if you have available',
'  procedure process_expressions',
'  ( pi_objt_id      flow_objects.objt_id%type default null',
'  , pi_set          flow_object_expressions.expr_set%type',
'  , pi_prcs_id      flow_processes.prcs_id%type',
'  , pi_sbfl_id      flow_subflows.sbfl_id%type',
'  );',
'',
'  -- oterwise overload provided, usung objt_bpmn_id...',
'  procedure process_expressions',
'  ( pi_objt_bpmn_id flow_objects.objt_bpmn_id%type',
'  , pi_set          flow_object_expressions.expr_set%type',
'  , pi_prcs_id      flow_processes.prcs_id%type',
'  , pi_sbfl_id      flow_subflows.sbfl_id%type',
'  );',
'',
'end flow_expressions;',
'/',
'create or replace package flow_gateways',
'accessible by (flow_engine)',
'as ',
'',
'procedure process_para_incl_Gateway',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_sbfl_info     in flow_subflows%rowtype',
'  , p_step_info     in flow_types_pkg.flow_step_info',
'  );',
'procedure process_exclusiveGateway',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_sbfl_info     in flow_subflows%rowtype',
'  , p_step_info     i'))
);
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(8806949341382474)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'n flow_types_pkg.flow_step_info',
'  );',
'',
' procedure process_eventBasedGateway',
'  ( p_process_id in flow_processes.prcs_id%type',
'  , p_subflow_id in flow_subflows.sbfl_id%type',
'  , p_sbfl_info  in flow_subflows%rowtype',
'  , p_step_info  in flow_types_pkg.flow_step_info',
'  );',
'',
'end flow_gateways;',
'/',
'',
'create or replace package flow_globals',
'as',
'',
'  process_id flow_processes.prcs_id%type;',
'  subflow_id flow_subflows.sbfl_id%type;',
'',
'  procedure set_context',
'  ( pi_prcs_id in flow_processes.prcs_id%type',
'  , pi_sbfl_id in flow_subflows.sbfl_id%type default null',
'  );',
'',
'  procedure set_step_error',
'  ( p_has_error  in boolean default false',
'  );',
'',
'  function get_step_error',
'  return boolean;',
'',
'  procedure set_is_recursive_step',
'  ( p_is_recursive_step  in boolean default false',
'  );',
'',
'  function get_is_recursive_step',
'  return boolean;',
'',
'end flow_globals;',
'/',
'',
'create or replace package flow_instances ',
'accessible by (flow_api_pkg, flow_engine)',
'as',
'',
'  function create_process',
'    ( p_dgrm_id   in flow_diagrams.dgrm_id%type',
'    , p_prcs_name in flow_processes.prcs_name%type',
'    ) return flow_processes.prcs_id%type',
'    ;',
'',
'  procedure start_process',
'    ( p_process_id    in flow_processes.prcs_id%type',
'    );',
'',
'  procedure reset_process',
'    ( p_process_id  in flow_processes.prcs_id%type',
'    , p_comment     in flow_instance_event_log.lgpr_comment%type default null',
'    );',
'',
'  procedure terminate_process',
'    ( p_process_id  in flow_processes.prcs_id%type',
'    , p_comment     in flow_instance_event_log.lgpr_comment%type default null',
'    );',
'',
'  procedure delete_process',
'    (',
'      p_process_id  in flow_processes.prcs_id%type',
'    , p_comment     in flow_instance_event_log.lgpr_comment%type default null',
'    );',
'',
'end flow_instances;',
'/',
'',
'create or replace package flow_logging',
'accessible by ( flow_engine, flow_instances, flow_process_vars, flow_expressions ',
'              , flow_boundary_events, flow_gateways, flow_tasks, flow_errors',
'              )',
'as',
'',
'  procedure log_instance_event',
'  ( p_process_id        in flow_subflow_log.sflg_prcs_id%type',
'  , p_event             in flow_instance_event_log.lgpr_prcs_event%type ',
'  , p_comment           in flow_instance_event_log.lgpr_comment%type default null',
'  , p_error_info        in flow_instance_event_log.lgpr_error_info%type default null',
'  );',
'',
'  procedure log_step_completion',
'  ( p_process_id        in flow_subflow_log.sflg_prcs_id%type',
'  , p_subflow_id        in flow_subflow_log.sflg_sbfl_id%type',
'  , p_completed_object  in flow_subflow_log.sflg_objt_id%type',
'  , p_notes             in flow_subflow_log.sflg_notes%type default null',
'  );',
'',
'  procedure log_variable_event -- logs process variable set events',
'  ( p_process_id        in flow_subflow_log.sflg_prcs_id%type',
'  , p_var_name          in flow_process_variables.prov_var_name%type',
'  , p_objt_bpmn_id      in flow_objects.objt_bpmn_id%type default null',
'  , p_subflow_id        in flow_subflow_log.sflg_sbfl_id%type default null',
'  , p_expr_set          in flow_object_expressions.expr_set%type default null',
'  , p_var_type          in flow_process_variables.prov_var_type%type',
'  , p_var_vc2           in flow_process_variables.prov_var_vc2%type default null',
'  , p_var_num           in flow_process_variables.prov_var_num%type default null',
'  , p_var_date          in flow_process_variables.prov_var_date%type default null',
'  , p_var_clob          in flow_process_variables.prov_var_clob%type default null',
'  );',
'',
'end flow_logging;',
'/',
'',
'create or replace package flow_plsql_runner_pkg',
'  authid current_user',
'as',
'',
'  e_plsql_script_requested_stop exception;',
'  e_plsql_script_failed exception;',
'',
'  pragma deprecate (get_current_prcs_id, ''flow_plsql_runner_pkg.get_current_prcs_id is deprecated.  Use flow_globals.process_id instead'');',
'  pragma deprecate (get_current_sbfl_id, ''flow_plsql_runner_pkg.get_current_sbfl_id is deprecated.  Use flow_globals.subflow_id instead'');',
'',
'  function get_current_prcs_id',
'    return flow_processes.prcs_id%type',
'  ;',
'',
'  function get_current_sbfl_id',
'    return flow_subflows.sbfl_id%type',
'  ;',
'  ',
'  procedure run_task_script',
'  (',
'    pi_prcs_id in flow_processes.prcs_id%type',
'  , pi_sbfl_id in flow_subflows.sbfl_id%type',
'  , pi_objt_id in flow_objects.objt_id%type',
'  );',
'',
'end flow_plsql_runner_pkg;',
'/',
'',
'create or replace package flow_process_vars',
'as ',
' /********************************************************************************',
'**',
'**        PROCESS VARIABLE SYSTEM (get / set / etc)',
'**',
'********************************************************************************/ ',
' ',
'',
'procedure set_var',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_vc2_value in flow_process_variables.prov_var_vc2%type',
', pi_sbfl_id in flow_subflows.sbfl_id%type default null',
', pi_objt_bpmn_id in flow_objects.objt_bpmn_id%type default null ',
', pi_expr_set in flow_object_expressions.expr_set%type default null',
');',
'',
'procedure set_var',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_num_value in flow_process_variables.prov_var_num%type',
', pi_sbfl_id in flow_subflows.sbfl_id%type default null',
', pi_objt_bpmn_id in flow_objects.objt_bpmn_id%type default null ',
', pi_expr_set in flow_object_expressions.expr_set%type default null',
');',
'',
'procedure set_var',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_date_value in flow_process_variables.prov_var_date%type',
', pi_sbfl_id in flow_subflows.sbfl_id%type default null',
', pi_objt_bpmn_id in flow_objects.objt_bpmn_id%type default null ',
', pi_expr_set in flow_object_expressions.expr_set%type default null',
');',
'',
'procedure set_var',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_clob_value in flow_process_variables.prov_var_clob%type',
', pi_sbfl_id in flow_subflows.sbfl_id%type default null',
', pi_objt_bpmn_id in flow_objects.objt_bpmn_id%type default null ',
', pi_expr_set in flow_object_expressions.expr_set%type default null',
');',
'',
'-- getters return',
'',
'function get_var_vc2',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_exception_on_null in boolean default false',
') return flow_process_variables.prov_var_vc2%type;',
'',
'function get_var_num',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_exception_on_null in boolean default false',
') return flow_process_variables.prov_var_num%type;',
'',
'function get_var_date',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_exception_on_null in boolean default false',
') return flow_process_variables.prov_var_date%type;',
'',
'function get_var_clob',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_exception_on_null in boolean default false',
') return flow_process_variables.prov_var_clob%type;',
'',
'procedure delete_var',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
');',
'',
'/********************************************************************************',
'**',
'**        SPECIAL CASE / BUILT-IN PROCESS VARIABLES',
'**',
'********************************************************************************/ ',
'',
'function get_business_ref',
'( pi_prcs_id in flow_processes.prcs_id%type)',
'return flow_process_variables.prov_var_vc2%type;',
'',
' /********************************************************************************',
'**',
'**        FOR FLOW_ENGINE USE',
'**',
'********************************************************************************/ ',
'',
'procedure delete_all_for_process',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_retain_builtins in boolean default false',
');',
'',
'procedure do_substitution',
'(',
'  pi_prcs_id in flow_processes.prcs_id%type',
', pi_sbfl_id in flow_subflows.sbfl_id%type',
', pio_string in out nocopy varchar2',
');',
'',
'end flow_process_vars;',
'/',
'',
'create or replace package flow_reservations',
'accessible by (flow_api_pkg, flow_engine)',
'as ',
'',
'    procedure reserve_step',
'    ( p_process_id         in flow_processes.prcs_id%type',
'    , p_subflow_id         in flow_subflows.sbfl_id%type',
'    , p_reservation        in flow_subflows.sbfl_reservation%type',
'    , p_called_internally  in boolean default false',
'    );',
'',
'    procedure release_step',
'    ( p_process_id         in flow_processes.prcs_id%type',
'    , p_subflow_id         in flow_subflows.sbfl_id%type',
'    , p_called_internally  in boolean default false',
'    );',
'',
'end flow_reservations;',
'/',
'',
'create or replace package flow_tasks',
'accessible by (flow_engine)',
'as  ',
'',
'  procedure process_task',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_sbfl_info     in flow_subflows%rowtype',
'  , p_step_info     in flow_types_pkg.flow_step_info',
'  );',
'',
'  procedure process_userTask',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_sbfl_info     in flow_subflows%rowtype',
'  , p_step_info     in flow_types_pkg.flow_step_info',
'  );',
'',
'  procedure process_scriptTask',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_sbfl_info     in flow_subflows%rowtype',
'  , p_step_info     in flow_types_pkg.flow_step_info',
'  );',
'',
'  procedure process_serviceTask',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_sbfl_info     in flow_subflows%rowtype',
'  , p_step_info     in flow_types_pkg.flow_step_info',
'  );',
'',
'  procedure process_manualTask',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_sbfl_info     in flow_subflows%rowtype',
'  , p_step_info     in flow_types_pkg.flow_step_info',
'  );',
'',
'end flow_tasks;',
'/',
'',
'',
'create or replace package flow_timers_pkg as',
'/******************************************************************************',
' Purpose:',
'   Provides support to timers in Flows for APEX.',
'',
' Grants required:',
'   CREATE JOB',
'******************************************************************************/',
'',
'/******************************************************************************',
'  CONSTANTS',
'******************************************************************************/',
'  c_created    varchar2(1) := ''C''; -- Created and waiting for the first action.',
'  c_active     varchar2(1) := ''A''; -- The time has already completed 1 action',
'                                   -- but will perform more actions.',
'  c_ended      varchar2(1) := ''E''; -- The timer has naturally completed his',
'                                   -- action/s with no external intervention.',
'  c_expired    varchar2(1) := ''X''; -- The timers is stopped by call from the',
'                                   -- flow when stepping forward, before his',
'                                   -- natural end.',
'  c_terminated varchar2(1) := ''T''; -- Abnormal termination by manual',
'                                   -- intervention.',
'  c_broken     varchar2(1) := ''B''; -- Error occured in timer flow.',
'                                   -- Timer will be ignored until manually',
'                                   -- reset to created or active.',
'',
'',
'/******************************************************************************',
'  step_timers',
'    check update status of active timers.',
'******************************************************************************/',
'  procedure step_timers;',
'',
'',
'/******************************************************************************',
'  start_timer',
'    create a new timer instance.',
'******************************************************************************/',
'  procedure start_timer',
'  (',
'    pi_prcs_id  in  flow_processes.prcs_id%type',
'  , pi_sbfl_id  in  flow_subflows.sbfl_id%type',
'  );',
'',
'/******************************************************************************',
'  expire_timer',
'    increment the progress in a flow pushing it to the next step.',
'******************************************************************************/',
'',
'  procedure expire_timer',
'  (',
'    pi_prcs_id  in  flow_processes.prcs_id%type',
'  , pi_sbfl_id  in  flow_subflows.sbfl_id%type',
'  );',
'',
'/******************************************************************************',
'  lock_timer',
'    locks the specified timer.',
'******************************************************************************/',
'',
'  procedure lock_timer',
'  (',
'    pi_prcs_id  in  flow_processes.prcs_id%type',
'  , pi_sbfl_id  in  flow_subflows.sbfl_id%type',
'  );',
'',
'/******************************************************************************',
'  kill_timer',
'    remove a timer instance before the expiration time.',
'******************************************************************************/',
'',
'  procedure terminate_timer ',
'  (',
'    pi_prcs_id      in flow_processes.prcs_id%type',
'  , pi_sbfl_id      in flow_subflows.sbfl_id%type',
'  , po_return_code out number',
'  );',
'',
'',
'/******************************************************************************',
'  lock_process_timers',
'    locks all the timers of a process.',
'******************************************************************************/',
'',
'  procedure lock_process_timers',
'  (',
'    pi_prcs_id  in  flow_processes.prcs_id%type',
'  );',
'',
'/******************************************************************************',
'  terminate_process_timers',
'    terminate all the timers of a process.',
'******************************************************************************/',
'',
'  procedure terminate_process_timers',
'  (',
'    pi_prcs_id      in flow_processes.prcs_id%type',
'  , po_return_code out number',
'  );',
'',
'/******************************************************************************',
'  delete_process_timers',
'    delete all the timers of a process.',
'******************************************************************************/',
'',
'  procedure delete_process_timers',
'  (',
'    pi_prcs_id      in flow_processes.prcs_id%type',
'  , po_return_code out number',
'  );',
'',
'/******************************************************************************',
'  terminate_all_timers',
'    termintate all the timers of all processes.',
'******************************************************************************/',
'',
'  procedure terminate_all_timers',
'  (',
'    po_return_code  out  number',
'  );',
'',
'',
'/******************************************************************************',
'  disable_scheduled_job',
'    disable the scheduled job processing of timers.',
'******************************************************************************/',
'',
'  procedure disable_scheduled_job;',
'',
'/******************************************************************************',
'  enable_scheduled_job',
'    enable the scheduled job processing of timers.',
'******************************************************************************/',
'',
'  procedure enable_scheduled_job;',
'',
'end flow_timers_pkg;',
'/',
'',
'create or replace package flow_usertask_pkg',
'  authid definer',
'as',
'',
'  function get_url',
'  (',
'    pi_prcs_id in flow_processes.prcs_id%type',
'  , pi_sbfl_id in flow_subflows.sbfl_id%type',
'  , pi_objt_id in flow_objects.objt_id%type',
'  ) return varchar2;',
'',
'end flow_usertask_pkg;',
'/',
'',
'create or replace package flow_p0005_api',
'  authid definer',
'as',
'',
'  function get_file_name(',
'      p_dgrm_id in number,',
'      p_include_version in varchar2,',
'      p_include_status in varchar2,',
'      p_include_category in varchar2,',
'      p_include_last_change_date in varchar2,',
'      p_download_as in varchar2',
'  ) return varchar2;',
'',
'  procedure download_file(',
'      p_dgrm_id in number,',
'      p_file_name in varchar2,',
'      p_download_as in varchar2,',
'      p_multi_file in boolean default false',
'  );',
'',
'end flow_p0005_api;',
'/',
'',
'create or replace package flow_p0006_api',
'  authid definer',
'as',
'',
'    function is_file_uploaded(',
'        pi_file_name in varchar2',
'    )',
'    return boolean;',
'    ',
'    function is_valid_xml(',
'        pi_import_from in varchar2,',
'        pi_dgrm_content in flow_diagrams.dgrm_content%type,',
'        pi_file_name in varchar2',
'    )',
'    return boolean;',
'',
'    function is_valid_multi_file_archive(',
'        pi_file_name in varchar2',
'    )',
'    return varchar2;',
'  ',
'    function upload_and_parse(',
'        pi_import_from     in varchar2,',
'        pi_dgrm_name       in flow_diagrams.dgrm_name%type,',
'        pi_dgrm_category   in flow_diagrams.dgrm_category%type,',
'        pi_dgrm_version    in flow_diagrams.dgrm_version%type,',
'        pi_dgrm_content    in flow_diagrams.dgrm_content%type,',
'        pi_file_name       in varchar2,',
'        pi_force_overwrite in varchar2',
'    ) ',
'    return flow_diagrams.dgrm_id%type;',
'',
'    procedure multiple_flow_import(',
'        pi_file_name       in varchar2,',
'        pi_force_overwrite in varchar2',
'    );',
'',
'end flow_p0006_api;',
'/',
'',
'create or replace package flow_p0007_api',
'  authid definer',
'as',
'',
'  procedure process_page',
'  (',
'    pio_dgrm_id      in out nocopy flow_diagrams.dgrm_id%type',
'  , pi_dgrm_name     in flow_diagrams.dgrm_name%type',
'  , pi_dgrm_version  in flow_diagrams.dgrm_version%type',
'  , pi_dgrm_category in flow_diagrams.dgrm_category%type',
'  , pi_new_version   in flow_diagrams.dgrm_version%type',
'  , pi_cascade       in varchar2',
'  , pi_request       in varchar2',
'  );',
'',
'end flow_p0007_api;',
'/',
'',
'create or replace package flow_engine_app_api',
'  authid definer',
'as',
'',
'  procedure handle_ajax;',
'',
'end flow_engine_app_api;',
'/',
'',
'create or replace package flow_plugin_manage_instance authid current_user as',
'   function execution (',
'      p_process  in  apex_plugin.t_process',
'    , p_plugin   in  apex_plugin.t_plugin',
'   ) return apex_plugin.t_process_exec_result;',
'',
'end flow_plugin_manage_instance;',
'/',
'',
'create or replace package flow_plugin_manage_instance_step authid current_user as',
'   function execution (',
'      p_process  in  apex_plugin.t_process',
'    , p_plugin   in  apex_plugin.t_plugin',
'   ) return apex_plugin.t_process_exec_result;',
'',
'end flow_plugin_manage_instance_step;',
'/',
'',
'create or replace package flow_plugin_manage_instance_variables authid current_user as',
'',
'   function execution (',
'      p_process  in  apex_plugin.t_process',
'    , p_plugin   in  apex_plugin.t_plugin',
'   ) return apex_plugin.t_process_exec_result;',
'',
'end flow_plugin_manage_instance_variables;',
'/',
'',
'create or replace package flow_modeler',
'as',
'',
'  function render',
'  (',
'    p_region              in  apex_plugin.t_region',
'  , p_plugin              in  apex_plugin.t_plugin',
'  , p_is_printer_friendly in  boolean',
'  )',
'    return apex_plugin.t_region_render_result;',
'',
'  function ajax',
'  (',
'    p_region              in  apex_plugin.t_region',
'  , p_plugin              in  apex_plugin.t_plugin',
'  )',
'    return apex_plugin.t_region_ajax_result;',
'',
'end flow_modeler;',
'/',
'',
'create or replace package flow_viewer',
'as',
'',
'  function render',
'  (',
'    p_region              in  apex_plugin.t_region',
'  , p_plugin              in  apex_plugin.t_plugin',
'  , p_is_printer_friendly in  boolean',
'  )',
'    return apex_plugin.t_region_render_result;',
'',
'  function ajax',
'  (',
'    p_region              in  apex_plugin.t_region',
'  , p_plugin              in  apex_plugin.t_plugin',
'  )',
'    return apex_plugin.t_region_ajax_result;',
'',
'end flow_viewer;',
'/',
''))
);
null;
wwv_flow_api.component_end;
end;
/
